
// <copyright file="GrammarBuilders.cs" author="Dmitry Kravchenin" email="d.kravchenin@zaaml.com">
//   Copyright (c) Zaaml. All rights reserved.
// </copyright>

// *************************************************************
//
// AutoGenerated
//
// *************************************************************

// ReSharper disable All

namespace Zaaml.Text
{
	internal partial class Grammar<TToken>
	{
			partial class CharEntry
			{
				public static PatternCollectionBuilder operator |(CharEntry op1, PatternCollectionBuilder op2)
				{
					return new PatternCollectionBuilder(new TokenEntry[] { op1 }) | op2;
				}

				public static PatternCollectionBuilder operator |(PatternCollectionBuilder op1, CharEntry op2)
				{
					return op1 | new PatternCollectionBuilder(new TokenEntry[] { op2 });
				}

				public static PatternBuilder operator +(CharEntry op1, PatternCollectionBuilder op2)
				{
					return new PatternBuilder(op1) + op2.AsFragment();
				}

				public static PatternBuilder operator +(PatternCollectionBuilder op1, CharEntry op2)
				{
					return new PatternBuilder(op1.AsFragment()) + op2;
				}

				public static PatternBuilder operator +(PatternBuilder op1, CharEntry op2)
				{
					return op1 + new PatternBuilder(op2);
				}

				public static PatternBuilder operator +(CharEntry op1, PatternBuilder op2)
				{
					return new PatternBuilder(op1) + op2;
				}

				public static PatternCollectionBuilder operator |(PatternBuilder op1, CharEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | new PatternBuilder(op2);
				}

				public static PatternCollectionBuilder operator |(CharEntry op1, PatternBuilder op2)
				{
					return new PatternCollectionBuilder() | new PatternBuilder(op1) | op2;
				}

				public static PatternBuilder operator +(CharEntry op1, CharEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(CharEntry op1, CharEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(CharEntry op1, QuantifierEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(CharEntry op1, QuantifierEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(CharEntry op1, RangeEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(CharEntry op1, RangeEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(CharEntry op1, SetEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(CharEntry op1, SetEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(CharEntry op1, TokenFragment op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(CharEntry op1, TokenFragment op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(CharEntry op1, TokenFragmentEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(CharEntry op1, TokenFragmentEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(CharEntry op1, LexerAction op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(CharEntry op1, LexerAction op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(CharEntry op1, LexerPredicate op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(CharEntry op1, LexerPredicate op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}


				public static PatternBuilder operator +(CharEntry op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.PredicateEntry op1, CharEntry op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(CharEntry op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.PredicateEntry op1, CharEntry op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

				public static PatternBuilder operator +(CharEntry op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.ActionEntry op1, CharEntry op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(CharEntry op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.ActionEntry op1, CharEntry op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

			}

			partial class QuantifierEntry
			{
				public static PatternCollectionBuilder operator |(QuantifierEntry op1, PatternCollectionBuilder op2)
				{
					return new PatternCollectionBuilder(new TokenEntry[] { op1 }) | op2;
				}

				public static PatternCollectionBuilder operator |(PatternCollectionBuilder op1, QuantifierEntry op2)
				{
					return op1 | new PatternCollectionBuilder(new TokenEntry[] { op2 });
				}

				public static PatternBuilder operator +(QuantifierEntry op1, PatternCollectionBuilder op2)
				{
					return new PatternBuilder(op1) + op2.AsFragment();
				}

				public static PatternBuilder operator +(PatternCollectionBuilder op1, QuantifierEntry op2)
				{
					return new PatternBuilder(op1.AsFragment()) + op2;
				}

				public static PatternBuilder operator +(PatternBuilder op1, QuantifierEntry op2)
				{
					return op1 + new PatternBuilder(op2);
				}

				public static PatternBuilder operator +(QuantifierEntry op1, PatternBuilder op2)
				{
					return new PatternBuilder(op1) + op2;
				}

				public static PatternCollectionBuilder operator |(PatternBuilder op1, QuantifierEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | new PatternBuilder(op2);
				}

				public static PatternCollectionBuilder operator |(QuantifierEntry op1, PatternBuilder op2)
				{
					return new PatternCollectionBuilder() | new PatternBuilder(op1) | op2;
				}

				public static PatternBuilder operator +(QuantifierEntry op1, CharEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(QuantifierEntry op1, CharEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(QuantifierEntry op1, QuantifierEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(QuantifierEntry op1, QuantifierEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(QuantifierEntry op1, RangeEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(QuantifierEntry op1, RangeEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(QuantifierEntry op1, SetEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(QuantifierEntry op1, SetEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(QuantifierEntry op1, TokenFragment op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(QuantifierEntry op1, TokenFragment op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(QuantifierEntry op1, TokenFragmentEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(QuantifierEntry op1, TokenFragmentEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(QuantifierEntry op1, LexerAction op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(QuantifierEntry op1, LexerAction op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(QuantifierEntry op1, LexerPredicate op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(QuantifierEntry op1, LexerPredicate op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}


				public static PatternBuilder operator +(QuantifierEntry op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.PredicateEntry op1, QuantifierEntry op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(QuantifierEntry op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.PredicateEntry op1, QuantifierEntry op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

				public static PatternBuilder operator +(QuantifierEntry op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.ActionEntry op1, QuantifierEntry op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(QuantifierEntry op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.ActionEntry op1, QuantifierEntry op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

			}

			partial class RangeEntry
			{
				public static PatternCollectionBuilder operator |(RangeEntry op1, PatternCollectionBuilder op2)
				{
					return new PatternCollectionBuilder(new TokenEntry[] { op1 }) | op2;
				}

				public static PatternCollectionBuilder operator |(PatternCollectionBuilder op1, RangeEntry op2)
				{
					return op1 | new PatternCollectionBuilder(new TokenEntry[] { op2 });
				}

				public static PatternBuilder operator +(RangeEntry op1, PatternCollectionBuilder op2)
				{
					return new PatternBuilder(op1) + op2.AsFragment();
				}

				public static PatternBuilder operator +(PatternCollectionBuilder op1, RangeEntry op2)
				{
					return new PatternBuilder(op1.AsFragment()) + op2;
				}

				public static PatternBuilder operator +(PatternBuilder op1, RangeEntry op2)
				{
					return op1 + new PatternBuilder(op2);
				}

				public static PatternBuilder operator +(RangeEntry op1, PatternBuilder op2)
				{
					return new PatternBuilder(op1) + op2;
				}

				public static PatternCollectionBuilder operator |(PatternBuilder op1, RangeEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | new PatternBuilder(op2);
				}

				public static PatternCollectionBuilder operator |(RangeEntry op1, PatternBuilder op2)
				{
					return new PatternCollectionBuilder() | new PatternBuilder(op1) | op2;
				}

				public static PatternBuilder operator +(RangeEntry op1, CharEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(RangeEntry op1, CharEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(RangeEntry op1, QuantifierEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(RangeEntry op1, QuantifierEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(RangeEntry op1, RangeEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(RangeEntry op1, RangeEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(RangeEntry op1, SetEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(RangeEntry op1, SetEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(RangeEntry op1, TokenFragment op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(RangeEntry op1, TokenFragment op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(RangeEntry op1, TokenFragmentEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(RangeEntry op1, TokenFragmentEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(RangeEntry op1, LexerAction op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(RangeEntry op1, LexerAction op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(RangeEntry op1, LexerPredicate op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(RangeEntry op1, LexerPredicate op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}


				public static PatternBuilder operator +(RangeEntry op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.PredicateEntry op1, RangeEntry op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(RangeEntry op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.PredicateEntry op1, RangeEntry op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

				public static PatternBuilder operator +(RangeEntry op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.ActionEntry op1, RangeEntry op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(RangeEntry op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.ActionEntry op1, RangeEntry op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

			}

			partial class SetEntry
			{
				public static PatternCollectionBuilder operator |(SetEntry op1, PatternCollectionBuilder op2)
				{
					return new PatternCollectionBuilder(new TokenEntry[] { op1 }) | op2;
				}

				public static PatternCollectionBuilder operator |(PatternCollectionBuilder op1, SetEntry op2)
				{
					return op1 | new PatternCollectionBuilder(new TokenEntry[] { op2 });
				}

				public static PatternBuilder operator +(SetEntry op1, PatternCollectionBuilder op2)
				{
					return new PatternBuilder(op1) + op2.AsFragment();
				}

				public static PatternBuilder operator +(PatternCollectionBuilder op1, SetEntry op2)
				{
					return new PatternBuilder(op1.AsFragment()) + op2;
				}

				public static PatternBuilder operator +(PatternBuilder op1, SetEntry op2)
				{
					return op1 + new PatternBuilder(op2);
				}

				public static PatternBuilder operator +(SetEntry op1, PatternBuilder op2)
				{
					return new PatternBuilder(op1) + op2;
				}

				public static PatternCollectionBuilder operator |(PatternBuilder op1, SetEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | new PatternBuilder(op2);
				}

				public static PatternCollectionBuilder operator |(SetEntry op1, PatternBuilder op2)
				{
					return new PatternCollectionBuilder() | new PatternBuilder(op1) | op2;
				}

				public static PatternBuilder operator +(SetEntry op1, CharEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(SetEntry op1, CharEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(SetEntry op1, QuantifierEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(SetEntry op1, QuantifierEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(SetEntry op1, RangeEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(SetEntry op1, RangeEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(SetEntry op1, SetEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(SetEntry op1, SetEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(SetEntry op1, TokenFragment op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(SetEntry op1, TokenFragment op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(SetEntry op1, TokenFragmentEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(SetEntry op1, TokenFragmentEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(SetEntry op1, LexerAction op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(SetEntry op1, LexerAction op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(SetEntry op1, LexerPredicate op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(SetEntry op1, LexerPredicate op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}


				public static PatternBuilder operator +(SetEntry op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.PredicateEntry op1, SetEntry op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(SetEntry op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.PredicateEntry op1, SetEntry op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

				public static PatternBuilder operator +(SetEntry op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.ActionEntry op1, SetEntry op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(SetEntry op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.ActionEntry op1, SetEntry op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

			}

			partial class TokenFragment
			{
				public static PatternCollectionBuilder operator |(TokenFragment op1, PatternCollectionBuilder op2)
				{
					return new PatternCollectionBuilder(new TokenEntry[] { op1 }) | op2;
				}

				public static PatternCollectionBuilder operator |(PatternCollectionBuilder op1, TokenFragment op2)
				{
					return op1 | new PatternCollectionBuilder(new TokenEntry[] { op2 });
				}

				public static PatternBuilder operator +(TokenFragment op1, PatternCollectionBuilder op2)
				{
					return new PatternBuilder(op1) + op2.AsFragment();
				}

				public static PatternBuilder operator +(PatternCollectionBuilder op1, TokenFragment op2)
				{
					return new PatternBuilder(op1.AsFragment()) + op2;
				}

				public static PatternBuilder operator +(PatternBuilder op1, TokenFragment op2)
				{
					return op1 + new PatternBuilder(op2);
				}

				public static PatternBuilder operator +(TokenFragment op1, PatternBuilder op2)
				{
					return new PatternBuilder(op1) + op2;
				}

				public static PatternCollectionBuilder operator |(PatternBuilder op1, TokenFragment op2)
				{
					return new PatternCollectionBuilder() | op1 | new PatternBuilder(op2);
				}

				public static PatternCollectionBuilder operator |(TokenFragment op1, PatternBuilder op2)
				{
					return new PatternCollectionBuilder() | new PatternBuilder(op1) | op2;
				}

				public static PatternBuilder operator +(TokenFragment op1, CharEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragment op1, CharEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragment op1, QuantifierEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragment op1, QuantifierEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragment op1, RangeEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragment op1, RangeEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragment op1, SetEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragment op1, SetEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragment op1, TokenFragment op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragment op1, TokenFragment op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragment op1, TokenFragmentEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragment op1, TokenFragmentEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragment op1, LexerAction op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragment op1, LexerAction op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragment op1, LexerPredicate op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragment op1, LexerPredicate op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}


				public static PatternBuilder operator +(TokenFragment op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.PredicateEntry op1, TokenFragment op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(TokenFragment op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.PredicateEntry op1, TokenFragment op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragment op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.ActionEntry op1, TokenFragment op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(TokenFragment op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.ActionEntry op1, TokenFragment op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

			}

			partial class TokenFragmentEntry
			{
				public static PatternCollectionBuilder operator |(TokenFragmentEntry op1, PatternCollectionBuilder op2)
				{
					return new PatternCollectionBuilder(new TokenEntry[] { op1 }) | op2;
				}

				public static PatternCollectionBuilder operator |(PatternCollectionBuilder op1, TokenFragmentEntry op2)
				{
					return op1 | new PatternCollectionBuilder(new TokenEntry[] { op2 });
				}

				public static PatternBuilder operator +(TokenFragmentEntry op1, PatternCollectionBuilder op2)
				{
					return new PatternBuilder(op1) + op2.AsFragment();
				}

				public static PatternBuilder operator +(PatternCollectionBuilder op1, TokenFragmentEntry op2)
				{
					return new PatternBuilder(op1.AsFragment()) + op2;
				}

				public static PatternBuilder operator +(PatternBuilder op1, TokenFragmentEntry op2)
				{
					return op1 + new PatternBuilder(op2);
				}

				public static PatternBuilder operator +(TokenFragmentEntry op1, PatternBuilder op2)
				{
					return new PatternBuilder(op1) + op2;
				}

				public static PatternCollectionBuilder operator |(PatternBuilder op1, TokenFragmentEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | new PatternBuilder(op2);
				}

				public static PatternCollectionBuilder operator |(TokenFragmentEntry op1, PatternBuilder op2)
				{
					return new PatternCollectionBuilder() | new PatternBuilder(op1) | op2;
				}

				public static PatternBuilder operator +(TokenFragmentEntry op1, CharEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragmentEntry op1, CharEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragmentEntry op1, QuantifierEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragmentEntry op1, QuantifierEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragmentEntry op1, RangeEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragmentEntry op1, RangeEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragmentEntry op1, SetEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragmentEntry op1, SetEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragmentEntry op1, TokenFragment op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragmentEntry op1, TokenFragment op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragmentEntry op1, TokenFragmentEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragmentEntry op1, TokenFragmentEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragmentEntry op1, LexerAction op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragmentEntry op1, LexerAction op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragmentEntry op1, LexerPredicate op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(TokenFragmentEntry op1, LexerPredicate op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}


				public static PatternBuilder operator +(TokenFragmentEntry op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.PredicateEntry op1, TokenFragmentEntry op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(TokenFragmentEntry op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.PredicateEntry op1, TokenFragmentEntry op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

				public static PatternBuilder operator +(TokenFragmentEntry op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.ActionEntry op1, TokenFragmentEntry op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(TokenFragmentEntry op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.ActionEntry op1, TokenFragmentEntry op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

			}

			partial class LexerAction
			{
				public static PatternCollectionBuilder operator |(LexerAction op1, PatternCollectionBuilder op2)
				{
					return new PatternCollectionBuilder(new TokenEntry[] { op1 }) | op2;
				}

				public static PatternCollectionBuilder operator |(PatternCollectionBuilder op1, LexerAction op2)
				{
					return op1 | new PatternCollectionBuilder(new TokenEntry[] { op2 });
				}

				public static PatternBuilder operator +(LexerAction op1, PatternCollectionBuilder op2)
				{
					return new PatternBuilder(op1) + op2.AsFragment();
				}

				public static PatternBuilder operator +(PatternCollectionBuilder op1, LexerAction op2)
				{
					return new PatternBuilder(op1.AsFragment()) + op2;
				}

				public static PatternBuilder operator +(PatternBuilder op1, LexerAction op2)
				{
					return op1 + new PatternBuilder(op2);
				}

				public static PatternBuilder operator +(LexerAction op1, PatternBuilder op2)
				{
					return new PatternBuilder(op1) + op2;
				}

				public static PatternCollectionBuilder operator |(PatternBuilder op1, LexerAction op2)
				{
					return new PatternCollectionBuilder() | op1 | new PatternBuilder(op2);
				}

				public static PatternCollectionBuilder operator |(LexerAction op1, PatternBuilder op2)
				{
					return new PatternCollectionBuilder() | new PatternBuilder(op1) | op2;
				}

				public static PatternBuilder operator +(LexerAction op1, CharEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerAction op1, CharEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerAction op1, QuantifierEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerAction op1, QuantifierEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerAction op1, RangeEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerAction op1, RangeEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerAction op1, SetEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerAction op1, SetEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerAction op1, TokenFragment op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerAction op1, TokenFragment op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerAction op1, TokenFragmentEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerAction op1, TokenFragmentEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerAction op1, LexerAction op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerAction op1, LexerAction op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerAction op1, LexerPredicate op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerAction op1, LexerPredicate op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}


				public static PatternBuilder operator +(LexerAction op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.PredicateEntry op1, LexerAction op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(LexerAction op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.PredicateEntry op1, LexerAction op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

				public static PatternBuilder operator +(LexerAction op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.ActionEntry op1, LexerAction op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(LexerAction op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.ActionEntry op1, LexerAction op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

			}

			partial class LexerPredicate
			{
				public static PatternCollectionBuilder operator |(LexerPredicate op1, PatternCollectionBuilder op2)
				{
					return new PatternCollectionBuilder(new TokenEntry[] { op1 }) | op2;
				}

				public static PatternCollectionBuilder operator |(PatternCollectionBuilder op1, LexerPredicate op2)
				{
					return op1 | new PatternCollectionBuilder(new TokenEntry[] { op2 });
				}

				public static PatternBuilder operator +(LexerPredicate op1, PatternCollectionBuilder op2)
				{
					return new PatternBuilder(op1) + op2.AsFragment();
				}

				public static PatternBuilder operator +(PatternCollectionBuilder op1, LexerPredicate op2)
				{
					return new PatternBuilder(op1.AsFragment()) + op2;
				}

				public static PatternBuilder operator +(PatternBuilder op1, LexerPredicate op2)
				{
					return op1 + new PatternBuilder(op2);
				}

				public static PatternBuilder operator +(LexerPredicate op1, PatternBuilder op2)
				{
					return new PatternBuilder(op1) + op2;
				}

				public static PatternCollectionBuilder operator |(PatternBuilder op1, LexerPredicate op2)
				{
					return new PatternCollectionBuilder() | op1 | new PatternBuilder(op2);
				}

				public static PatternCollectionBuilder operator |(LexerPredicate op1, PatternBuilder op2)
				{
					return new PatternCollectionBuilder() | new PatternBuilder(op1) | op2;
				}

				public static PatternBuilder operator +(LexerPredicate op1, CharEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerPredicate op1, CharEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerPredicate op1, QuantifierEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerPredicate op1, QuantifierEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerPredicate op1, RangeEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerPredicate op1, RangeEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerPredicate op1, SetEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerPredicate op1, SetEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerPredicate op1, TokenFragment op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerPredicate op1, TokenFragment op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerPredicate op1, TokenFragmentEntry op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerPredicate op1, TokenFragmentEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerPredicate op1, LexerAction op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerPredicate op1, LexerAction op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}

				public static PatternBuilder operator +(LexerPredicate op1, LexerPredicate op2)
				{
					return new PatternBuilder(op1) + op2;
				}		
				
				public static PatternCollectionBuilder operator |(LexerPredicate op1, LexerPredicate op2)
				{
					return new PatternCollectionBuilder() | op1 | op2;
				}


				public static PatternBuilder operator +(LexerPredicate op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.PredicateEntry op1, LexerPredicate op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(LexerPredicate op1, Lexer<TToken>.PredicateEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.PredicateEntry op1, LexerPredicate op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

				public static PatternBuilder operator +(LexerPredicate op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternBuilder(op1) + (TokenEntry)op2;
				}

				public static PatternBuilder operator +(Lexer<TToken>.ActionEntry op1, LexerPredicate op2)
				{
					return new PatternBuilder((TokenEntry)op1) + op2;
				}	
				
				public static PatternCollectionBuilder operator |(LexerPredicate op1, Lexer<TToken>.ActionEntry op2)
				{
					return new PatternCollectionBuilder() | op1 | (TokenEntry)op2;
				}				

				public static PatternCollectionBuilder operator |(Lexer<TToken>.ActionEntry op1, LexerPredicate op2)
				{
					return new PatternCollectionBuilder() | (TokenEntry)op1 | op2;
				}

			}

			partial class TokenRule
			{
				public static ParserProductionBuilder operator +(ParserAction op1, TokenRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRule op1, ParserAction op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}	

				public static ParserProductionCollectionBuilder operator |(ParserAction op1, TokenRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}	
				public static ParserProductionBuilder operator +(ParserFragment op1, TokenRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRule op1, ParserFragment op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}	

				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, TokenRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}	
				public static ParserProductionBuilder operator +(ParserPredicate op1, TokenRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRule op1, ParserPredicate op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}	

				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, TokenRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}	
				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, TokenRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRule op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}	

				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, TokenRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}	
				public static ParserProductionBuilder operator +(ParserRuleEntry op1, TokenRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRule op1, ParserRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}	

				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, TokenRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}	
				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, TokenRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRule op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}	

				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, TokenRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}	
				public static ParserProductionBuilder operator +(ParserRule op1, TokenRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRule op1, ParserRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}	

				public static ParserProductionCollectionBuilder operator |(ParserRule op1, TokenRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}	
				public static ParserProductionBuilder operator +(ExternalParserEntry op1, TokenRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRule op1, ExternalParserEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}	

				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, TokenRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}	
				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, TokenRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRule op1, ExternalLexerEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}	

				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, TokenRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}	
				public static ParserProductionBuilder operator +(TokenRuleSet op1, TokenRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRule op1, TokenRuleSet op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}	

				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, TokenRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}	
				public static ParserProductionBuilder operator +(Parser<TToken>.PredicateEntry op1, TokenRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRule op1, Parser<TToken>.PredicateEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}	

				public static ParserProductionCollectionBuilder operator |(Parser<TToken>.PredicateEntry op1, TokenRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, Parser<TToken>.PredicateEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}	
				public static ParserProductionBuilder operator +(Parser<TToken>.ActionEntry op1, TokenRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRule op1, Parser<TToken>.ActionEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}	

				public static ParserProductionCollectionBuilder operator |(Parser<TToken>.ActionEntry op1, TokenRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, Parser<TToken>.ActionEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}	
			}

			partial class ParserAction
			{
				public static implicit operator ParserProduction(ParserAction entry)
				{
					return new ParserProduction(new ParserEntry[] { entry });
				}

				public static ParserProductionBuilder operator +(ParserAction op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsFragment();
				}

				public static ParserProductionBuilder operator +(ParserProductionCollectionBuilder op1, ParserAction op2)
				{
					return op1.AsFragment() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserAction op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}

				public static ParserProductionBuilder operator +(TokenInterProductionCollectionBuilder op1, ParserAction op2)
				{
					return new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserProductionBuilder op1, ParserAction op2)
				{
					return op1 + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserAction op1, ParserProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2;
				}

				public static ParserProductionBuilder operator +(ParserAction op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionBuilder operator +(TokenInterProductionBuilder op1, ParserAction op2)
				{
					return op1.AsParserProductionBuilder() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserAction op1, TokenInterEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.CreateParserEntry());
				}
								
				public static ParserProductionBuilder operator +(TokenInterEntry op1, ParserAction op2)
				{
					return new ParserProductionBuilder(op1.CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserAction op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op1 })) | op2;
				}

				public static ParserProductionCollectionBuilder operator |(ParserProductionCollectionBuilder op1, ParserAction op2)
				{
					return op1 | new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op2 }));
				}

				public static ParserProductionCollectionBuilder operator |(ParserAction op1, ParserProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2;
				}
				public static ParserProductionCollectionBuilder operator |(ParserProductionBuilder op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserAction op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionBuilder op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | op1.AsParserProductionBuilder() | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserAction op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionCollectionBuilder op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) | new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserAction op1, ParserAction op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserAction op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserAction op1, ParserFragment op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserAction op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserAction op1, ParserPredicate op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserAction op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserAction op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserAction op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserAction op1, ParserRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserAction op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserAction op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserAction op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserAction op1, ParserRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserAction op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserAction op1, ExternalParserEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserAction op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserAction op1, ExternalLexerEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserAction op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserAction op1, TokenRuleSet op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserAction op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

			}

			partial class ParserFragment
			{
				public static implicit operator ParserProduction(ParserFragment entry)
				{
					return new ParserProduction(new ParserEntry[] { entry });
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsFragment();
				}

				public static ParserProductionBuilder operator +(ParserProductionCollectionBuilder op1, ParserFragment op2)
				{
					return op1.AsFragment() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}

				public static ParserProductionBuilder operator +(TokenInterProductionCollectionBuilder op1, ParserFragment op2)
				{
					return new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserProductionBuilder op1, ParserFragment op2)
				{
					return op1 + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, ParserProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2;
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionBuilder operator +(TokenInterProductionBuilder op1, ParserFragment op2)
				{
					return op1.AsParserProductionBuilder() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, TokenInterEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.CreateParserEntry());
				}
								
				public static ParserProductionBuilder operator +(TokenInterEntry op1, ParserFragment op2)
				{
					return new ParserProductionBuilder(op1.CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op1 })) | op2;
				}

				public static ParserProductionCollectionBuilder operator |(ParserProductionCollectionBuilder op1, ParserFragment op2)
				{
					return op1 | new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op2 }));
				}

				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, ParserProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2;
				}
				public static ParserProductionCollectionBuilder operator |(ParserProductionBuilder op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionBuilder op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | op1.AsParserProductionBuilder() | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionCollectionBuilder op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) | new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, ParserAction op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, ParserFragment op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, ParserPredicate op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, ParserRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, ParserRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, ExternalParserEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, ExternalLexerEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserFragment op1, TokenRuleSet op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserFragment op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

			}

			partial class ParserPredicate
			{
				public static implicit operator ParserProduction(ParserPredicate entry)
				{
					return new ParserProduction(new ParserEntry[] { entry });
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsFragment();
				}

				public static ParserProductionBuilder operator +(ParserProductionCollectionBuilder op1, ParserPredicate op2)
				{
					return op1.AsFragment() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}

				public static ParserProductionBuilder operator +(TokenInterProductionCollectionBuilder op1, ParserPredicate op2)
				{
					return new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserProductionBuilder op1, ParserPredicate op2)
				{
					return op1 + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, ParserProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2;
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionBuilder operator +(TokenInterProductionBuilder op1, ParserPredicate op2)
				{
					return op1.AsParserProductionBuilder() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, TokenInterEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.CreateParserEntry());
				}
								
				public static ParserProductionBuilder operator +(TokenInterEntry op1, ParserPredicate op2)
				{
					return new ParserProductionBuilder(op1.CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op1 })) | op2;
				}

				public static ParserProductionCollectionBuilder operator |(ParserProductionCollectionBuilder op1, ParserPredicate op2)
				{
					return op1 | new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op2 }));
				}

				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, ParserProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2;
				}
				public static ParserProductionCollectionBuilder operator |(ParserProductionBuilder op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionBuilder op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | op1.AsParserProductionBuilder() | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionCollectionBuilder op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) | new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, ParserAction op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, ParserFragment op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, ParserPredicate op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, ParserRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, ParserRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, ExternalParserEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, ExternalLexerEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserPredicate op1, TokenRuleSet op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserPredicate op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

			}

			partial class ParserQuantifierEntry
			{
				public static implicit operator ParserProduction(ParserQuantifierEntry entry)
				{
					return new ParserProduction(new ParserEntry[] { entry });
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsFragment();
				}

				public static ParserProductionBuilder operator +(ParserProductionCollectionBuilder op1, ParserQuantifierEntry op2)
				{
					return op1.AsFragment() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}

				public static ParserProductionBuilder operator +(TokenInterProductionCollectionBuilder op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserProductionBuilder op1, ParserQuantifierEntry op2)
				{
					return op1 + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2;
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionBuilder operator +(TokenInterProductionBuilder op1, ParserQuantifierEntry op2)
				{
					return op1.AsParserProductionBuilder() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, TokenInterEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.CreateParserEntry());
				}
								
				public static ParserProductionBuilder operator +(TokenInterEntry op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionBuilder(op1.CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op1 })) | op2;
				}

				public static ParserProductionCollectionBuilder operator |(ParserProductionCollectionBuilder op1, ParserQuantifierEntry op2)
				{
					return op1 | new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op2 }));
				}

				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2;
				}
				public static ParserProductionCollectionBuilder operator |(ParserProductionBuilder op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionBuilder op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1.AsParserProductionBuilder() | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionCollectionBuilder op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) | new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, ParserAction op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, ParserFragment op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, ParserPredicate op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, ParserRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, ParserRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, ExternalParserEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, ExternalLexerEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserQuantifierEntry op1, TokenRuleSet op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserQuantifierEntry op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

			}

			partial class ParserRuleEntry
			{
				public static implicit operator ParserProduction(ParserRuleEntry entry)
				{
					return new ParserProduction(new ParserEntry[] { entry });
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsFragment();
				}

				public static ParserProductionBuilder operator +(ParserProductionCollectionBuilder op1, ParserRuleEntry op2)
				{
					return op1.AsFragment() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}

				public static ParserProductionBuilder operator +(TokenInterProductionCollectionBuilder op1, ParserRuleEntry op2)
				{
					return new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserProductionBuilder op1, ParserRuleEntry op2)
				{
					return op1 + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2;
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionBuilder operator +(TokenInterProductionBuilder op1, ParserRuleEntry op2)
				{
					return op1.AsParserProductionBuilder() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, TokenInterEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.CreateParserEntry());
				}
								
				public static ParserProductionBuilder operator +(TokenInterEntry op1, ParserRuleEntry op2)
				{
					return new ParserProductionBuilder(op1.CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op1 })) | op2;
				}

				public static ParserProductionCollectionBuilder operator |(ParserProductionCollectionBuilder op1, ParserRuleEntry op2)
				{
					return op1 | new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op2 }));
				}

				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2;
				}
				public static ParserProductionCollectionBuilder operator |(ParserProductionBuilder op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionBuilder op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1.AsParserProductionBuilder() | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionCollectionBuilder op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) | new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, ParserAction op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, ParserFragment op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, ParserPredicate op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, ParserRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, ParserRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, ExternalParserEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, ExternalLexerEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRuleEntry op1, TokenRuleSet op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRuleEntry op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

			}

			partial class ParserTokenRuleEntry
			{
				public static implicit operator ParserProduction(ParserTokenRuleEntry entry)
				{
					return new ParserProduction(new ParserEntry[] { entry });
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsFragment();
				}

				public static ParserProductionBuilder operator +(ParserProductionCollectionBuilder op1, ParserTokenRuleEntry op2)
				{
					return op1.AsFragment() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}

				public static ParserProductionBuilder operator +(TokenInterProductionCollectionBuilder op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserProductionBuilder op1, ParserTokenRuleEntry op2)
				{
					return op1 + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2;
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionBuilder operator +(TokenInterProductionBuilder op1, ParserTokenRuleEntry op2)
				{
					return op1.AsParserProductionBuilder() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, TokenInterEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.CreateParserEntry());
				}
								
				public static ParserProductionBuilder operator +(TokenInterEntry op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionBuilder(op1.CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op1 })) | op2;
				}

				public static ParserProductionCollectionBuilder operator |(ParserProductionCollectionBuilder op1, ParserTokenRuleEntry op2)
				{
					return op1 | new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op2 }));
				}

				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2;
				}
				public static ParserProductionCollectionBuilder operator |(ParserProductionBuilder op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionBuilder op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1.AsParserProductionBuilder() | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionCollectionBuilder op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) | new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, ParserAction op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, ParserFragment op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, ParserPredicate op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, ParserRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, ParserRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, ExternalParserEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, ExternalLexerEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserTokenRuleEntry op1, TokenRuleSet op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserTokenRuleEntry op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

			}

			partial class ParserRule
			{
				public static implicit operator ParserProduction(ParserRule entry)
				{
					return new ParserProduction(new ParserEntry[] { entry });
				}

				public static ParserProductionBuilder operator +(ParserRule op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsFragment();
				}

				public static ParserProductionBuilder operator +(ParserProductionCollectionBuilder op1, ParserRule op2)
				{
					return op1.AsFragment() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserRule op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}

				public static ParserProductionBuilder operator +(TokenInterProductionCollectionBuilder op1, ParserRule op2)
				{
					return new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserProductionBuilder op1, ParserRule op2)
				{
					return op1 + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserRule op1, ParserProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2;
				}

				public static ParserProductionBuilder operator +(ParserRule op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionBuilder operator +(TokenInterProductionBuilder op1, ParserRule op2)
				{
					return op1.AsParserProductionBuilder() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserRule op1, TokenInterEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.CreateParserEntry());
				}
								
				public static ParserProductionBuilder operator +(TokenInterEntry op1, ParserRule op2)
				{
					return new ParserProductionBuilder(op1.CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserRule op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op1 })) | op2;
				}

				public static ParserProductionCollectionBuilder operator |(ParserProductionCollectionBuilder op1, ParserRule op2)
				{
					return op1 | new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op2 }));
				}

				public static ParserProductionCollectionBuilder operator |(ParserRule op1, ParserProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2;
				}
				public static ParserProductionCollectionBuilder operator |(ParserProductionBuilder op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserRule op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionBuilder op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1.AsParserProductionBuilder() | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ParserRule op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionCollectionBuilder op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) | new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserRule op1, ParserAction op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRule op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRule op1, ParserFragment op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRule op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRule op1, ParserPredicate op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRule op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRule op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRule op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRule op1, ParserRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRule op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRule op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRule op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRule op1, ParserRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRule op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRule op1, ExternalParserEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRule op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRule op1, ExternalLexerEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRule op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ParserRule op1, TokenRuleSet op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ParserRule op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

			}

			partial class ExternalParserEntry
			{
				public static implicit operator ParserProduction(ExternalParserEntry entry)
				{
					return new ParserProduction(new ParserEntry[] { entry });
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsFragment();
				}

				public static ParserProductionBuilder operator +(ParserProductionCollectionBuilder op1, ExternalParserEntry op2)
				{
					return op1.AsFragment() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}

				public static ParserProductionBuilder operator +(TokenInterProductionCollectionBuilder op1, ExternalParserEntry op2)
				{
					return new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserProductionBuilder op1, ExternalParserEntry op2)
				{
					return op1 + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2;
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionBuilder operator +(TokenInterProductionBuilder op1, ExternalParserEntry op2)
				{
					return op1.AsParserProductionBuilder() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, TokenInterEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.CreateParserEntry());
				}
								
				public static ParserProductionBuilder operator +(TokenInterEntry op1, ExternalParserEntry op2)
				{
					return new ParserProductionBuilder(op1.CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op1 })) | op2;
				}

				public static ParserProductionCollectionBuilder operator |(ParserProductionCollectionBuilder op1, ExternalParserEntry op2)
				{
					return op1 | new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op2 }));
				}

				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2;
				}
				public static ParserProductionCollectionBuilder operator |(ParserProductionBuilder op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionBuilder op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1.AsParserProductionBuilder() | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionCollectionBuilder op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) | new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, ParserAction op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, ParserFragment op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, ParserPredicate op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, ParserRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, ParserRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, ExternalParserEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, ExternalLexerEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalParserEntry op1, TokenRuleSet op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalParserEntry op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

			}

			partial class ExternalLexerEntry
			{
				public static implicit operator ParserProduction(ExternalLexerEntry entry)
				{
					return new ParserProduction(new ParserEntry[] { entry });
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsFragment();
				}

				public static ParserProductionBuilder operator +(ParserProductionCollectionBuilder op1, ExternalLexerEntry op2)
				{
					return op1.AsFragment() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}

				public static ParserProductionBuilder operator +(TokenInterProductionCollectionBuilder op1, ExternalLexerEntry op2)
				{
					return new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserProductionBuilder op1, ExternalLexerEntry op2)
				{
					return op1 + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2;
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionBuilder operator +(TokenInterProductionBuilder op1, ExternalLexerEntry op2)
				{
					return op1.AsParserProductionBuilder() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, TokenInterEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.CreateParserEntry());
				}
								
				public static ParserProductionBuilder operator +(TokenInterEntry op1, ExternalLexerEntry op2)
				{
					return new ParserProductionBuilder(op1.CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op1 })) | op2;
				}

				public static ParserProductionCollectionBuilder operator |(ParserProductionCollectionBuilder op1, ExternalLexerEntry op2)
				{
					return op1 | new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op2 }));
				}

				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2;
				}
				public static ParserProductionCollectionBuilder operator |(ParserProductionBuilder op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionBuilder op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1.AsParserProductionBuilder() | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionCollectionBuilder op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) | new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, ParserAction op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, ParserFragment op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, ParserPredicate op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, ParserRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, ParserRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, ExternalParserEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, ExternalLexerEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(ExternalLexerEntry op1, TokenRuleSet op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(ExternalLexerEntry op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

			}

			partial class TokenRuleSet
			{
				public static implicit operator ParserProduction(TokenRuleSet entry)
				{
					return new ParserProduction(new ParserEntry[] { entry });
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsFragment();
				}

				public static ParserProductionBuilder operator +(ParserProductionCollectionBuilder op1, TokenRuleSet op2)
				{
					return op1.AsFragment() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}

				public static ParserProductionBuilder operator +(TokenInterProductionCollectionBuilder op1, TokenRuleSet op2)
				{
					return new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(ParserProductionBuilder op1, TokenRuleSet op2)
				{
					return op1 + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, ParserProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2;
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionBuilder operator +(TokenInterProductionBuilder op1, TokenRuleSet op2)
				{
					return op1.AsParserProductionBuilder() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, TokenInterEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2.CreateParserEntry());
				}
								
				public static ParserProductionBuilder operator +(TokenInterEntry op1, TokenRuleSet op2)
				{
					return new ParserProductionBuilder(op1.CreateParserEntry()) + new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op1 })) | op2;
				}

				public static ParserProductionCollectionBuilder operator |(ParserProductionCollectionBuilder op1, TokenRuleSet op2)
				{
					return op1 | new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op2 }));
				}

				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, ParserProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2;
				}
				public static ParserProductionCollectionBuilder operator |(ParserProductionBuilder op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2.AsParserProductionBuilder();
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionBuilder op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | op1.AsParserProductionBuilder() | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, TokenInterProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | new ParserProductionBuilder(op2.AsFragment().CreateParserEntry());
				}
								
				public static ParserProductionCollectionBuilder operator |(TokenInterProductionCollectionBuilder op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1.AsFragment().CreateParserEntry()) | new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, ParserAction op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, ParserAction op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, ParserFragment op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, ParserFragment op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, ParserPredicate op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, ParserPredicate op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, ParserQuantifierEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, ParserRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, ParserRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, ParserTokenRuleEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, ParserRule op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, ParserRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, ExternalParserEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, ExternalParserEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, ExternalLexerEntry op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, ExternalLexerEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

				public static ParserProductionBuilder operator +(TokenRuleSet op1, TokenRuleSet op2)
				{
					return new ParserProductionBuilder(op1) + new ParserProductionBuilder(op2);
				}		
				
				public static ParserProductionCollectionBuilder operator |(TokenRuleSet op1, TokenRuleSet op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | op2;
				}

			}

			partial struct ParserProductionBuilder
			{
				public static ParserProductionBuilder operator +(ParserProductionBuilder op1, TokenRule op2)
				{
					return op1 + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(TokenRule op1, ParserProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2;
				}

				public static ParserProductionCollectionBuilder operator |(ParserProductionBuilder op1, TokenRule op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, ParserProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2;
				}
			}

			partial struct ParserProductionCollectionBuilder
			{
				public static ParserProductionCollectionBuilder operator |(ParserProductionCollectionBuilder op1, TokenRule op2)
				{
					return op1 | new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op2 }));
				}

				public static ParserProductionCollectionBuilder operator |(TokenRule op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op1 })) | op2;
				}
			}
			partial struct ParserProductionBuilder
			{
				public static ParserProductionBuilder operator +(ParserProductionBuilder op1, Parser<TToken>.PredicateEntry op2)
				{
					return op1 + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(Parser<TToken>.PredicateEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2;
				}

				public static ParserProductionCollectionBuilder operator |(ParserProductionBuilder op1, Parser<TToken>.PredicateEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(Parser<TToken>.PredicateEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2;
				}
			}

			partial struct ParserProductionCollectionBuilder
			{
				public static ParserProductionCollectionBuilder operator |(ParserProductionCollectionBuilder op1, Parser<TToken>.PredicateEntry op2)
				{
					return op1 | new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op2 }));
				}

				public static ParserProductionCollectionBuilder operator |(Parser<TToken>.PredicateEntry op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op1 })) | op2;
				}
			}
			partial struct ParserProductionBuilder
			{
				public static ParserProductionBuilder operator +(ParserProductionBuilder op1, Parser<TToken>.ActionEntry op2)
				{
					return op1 + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(Parser<TToken>.ActionEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2;
				}

				public static ParserProductionCollectionBuilder operator |(ParserProductionBuilder op1, Parser<TToken>.ActionEntry op2)
				{
					return new ParserProductionCollectionBuilder() | op1 | new ParserProductionBuilder(op2);
				}

				public static ParserProductionCollectionBuilder operator |(Parser<TToken>.ActionEntry op1, ParserProductionBuilder op2)
				{
					return new ParserProductionCollectionBuilder() | new ParserProductionBuilder(op1) | op2;
				}
			}

			partial struct ParserProductionCollectionBuilder
			{
				public static ParserProductionCollectionBuilder operator |(ParserProductionCollectionBuilder op1, Parser<TToken>.ActionEntry op2)
				{
					return op1 | new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op2 }));
				}

				public static ParserProductionCollectionBuilder operator |(Parser<TToken>.ActionEntry op1, ParserProductionCollectionBuilder op2)
				{
					return new ParserProductionCollectionBuilder(new ParserProduction(new ParserEntry[] { op1 })) | op2;
				}
			}
			partial struct TokenInterProductionBuilder
			{
				public static ParserProductionBuilder operator +(TokenInterProductionBuilder op1, Parser<TToken>.PredicateEntry op2)
				{
					return op1.AsParserProductionBuilder() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(Parser<TToken>.PredicateEntry op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsParserProductionBuilder();
				}
			}
			partial struct TokenInterProductionBuilder
			{
				public static ParserProductionBuilder operator +(TokenInterProductionBuilder op1, Parser<TToken>.ActionEntry op2)
				{
					return op1.AsParserProductionBuilder() + new ParserProductionBuilder(op2);
				}

				public static ParserProductionBuilder operator +(Parser<TToken>.ActionEntry op1, TokenInterProductionBuilder op2)
				{
					return new ParserProductionBuilder(op1) + op2.AsParserProductionBuilder();
				}
			}
	}
}
