<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <copyright file="GrammarBuilders.cs" author="Dmitry Kravchenin" email="d.kravchenin@zaaml.com">
//   Copyright (c) Zaaml. All rights reserved.
// </copyright>

// *************************************************************
//
// AutoGenerated
//
// *************************************************************

// ReSharper disable All

namespace Zaaml.Text
{
	public delegate TResult SyntaxBindFunc<in TSyntaxFactory, out TResult>(TSyntaxFactory factory);
<#
		// Lexer operators
		for (var i = 1; i <= 32; i++)
		{
			var typeParam = string.Join(", ", Enumerable.Range(0, i).Select(j => $"in TArg{j + 1}"));
			var arg = string.Join(", ", Enumerable.Range(0, i).Select(j => $"TArg{j + 1} arg{j + 1}"));
#>
	public delegate TResult SyntaxBindFunc<in TSyntaxFactory, <#= typeParam #>, out TResult>(TSyntaxFactory factory, <#= arg #>);
<#
		}
#>

	internal abstract partial class Grammar<TGrammar, TToken, TNode, TSyntaxFactory>
	{
		protected internal sealed partial class ParserSyntaxNode<TActualNode>
		{
			public void BindFactory<TResult>(SyntaxBindFunc<TSyntaxFactory, TResult> expression, ParserSyntaxProduction parserProduction)
			{
				parserProduction.ProductionBinding = SyntaxFactoryBinding.Bind<TNode, TSyntaxFactory>(expression);

				AddProductionCore(parserProduction);
			}
<#
		// Lexer operators
		for (var i = 1; i <= 32; i++)
		{
			var arg = string.Join(", ", Enumerable.Range(0, i).Select(j => $"TArg{j + 1}"));
#>
			public void BindFactory<<#= arg #>, TResult>(SyntaxBindFunc<TSyntaxFactory, <#= arg #>, TResult> expression, ParserSyntaxProduction parserProduction)
			{
				parserProduction.ProductionBinding = SyntaxFactoryBinding.Bind<TNode, TSyntaxFactory>(expression);

				AddProductionCore(parserProduction);
			}			
<#
		}
#>
		}
	}
}