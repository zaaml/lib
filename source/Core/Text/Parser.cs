
// <copyright file="Range.cs" author="Dmitry Kravchenin" email="d.kravchenin@zaaml.com">
//   Copyright (c) Zaaml. All rights reserved.
// </copyright>

// *************************************************************
//
// AutoGenerated
//
// *************************************************************

// ReSharper disable All

using System.Collections.Generic;


namespace Zaaml.Core.Text
{
	internal partial class Parser
	{
		private static readonly Dictionary<Type, object> Dictionary = new Dictionary<Type, object> 
		{
			{ typeof(byte), new byteParser() },
			{ typeof(sbyte), new sbyteParser() },
			{ typeof(char), new charParser() },
			{ typeof(short), new shortParser() },
			{ typeof(ushort), new ushortParser() },
			{ typeof(int), new intParser() },
			{ typeof(uint), new uintParser() },
			{ typeof(long), new longParser() },
			{ typeof(ulong), new ulongParser() },
			{ typeof(float), new floatParser() },
			{ typeof(double), new doubleParser() },
		};

		public static IParser<T> Get<T>()
		{
			return (IParser<T>)Dictionary.GetValueOrDefault(typeof(T));
		}

		private class byteParser : IParser<byte>
		{
			public byte Parse(string value)
			{
				return byte.Parse(value);
			}

			public bool TryParse(string value, out byte result)
			{
				return byte.TryParse(value, out result);
			}
		}

		private class sbyteParser : IParser<sbyte>
		{
			public sbyte Parse(string value)
			{
				return sbyte.Parse(value);
			}

			public bool TryParse(string value, out sbyte result)
			{
				return sbyte.TryParse(value, out result);
			}
		}

		private class charParser : IParser<char>
		{
			public char Parse(string value)
			{
				return char.Parse(value);
			}

			public bool TryParse(string value, out char result)
			{
				return char.TryParse(value, out result);
			}
		}

		private class shortParser : IParser<short>
		{
			public short Parse(string value)
			{
				return short.Parse(value);
			}

			public bool TryParse(string value, out short result)
			{
				return short.TryParse(value, out result);
			}
		}

		private class ushortParser : IParser<ushort>
		{
			public ushort Parse(string value)
			{
				return ushort.Parse(value);
			}

			public bool TryParse(string value, out ushort result)
			{
				return ushort.TryParse(value, out result);
			}
		}

		private class intParser : IParser<int>
		{
			public int Parse(string value)
			{
				return int.Parse(value);
			}

			public bool TryParse(string value, out int result)
			{
				return int.TryParse(value, out result);
			}
		}

		private class uintParser : IParser<uint>
		{
			public uint Parse(string value)
			{
				return uint.Parse(value);
			}

			public bool TryParse(string value, out uint result)
			{
				return uint.TryParse(value, out result);
			}
		}

		private class longParser : IParser<long>
		{
			public long Parse(string value)
			{
				return long.Parse(value);
			}

			public bool TryParse(string value, out long result)
			{
				return long.TryParse(value, out result);
			}
		}

		private class ulongParser : IParser<ulong>
		{
			public ulong Parse(string value)
			{
				return ulong.Parse(value);
			}

			public bool TryParse(string value, out ulong result)
			{
				return ulong.TryParse(value, out result);
			}
		}

		private class floatParser : IParser<float>
		{
			public float Parse(string value)
			{
				return float.Parse(value);
			}

			public bool TryParse(string value, out float result)
			{
				return float.TryParse(value, out result);
			}
		}

		private class doubleParser : IParser<double>
		{
			public double Parse(string value)
			{
				return double.Parse(value);
			}

			public bool TryParse(string value, out double result)
			{
				return double.TryParse(value, out result);
			}
		}

		
	}

	public partial class StaticParser<T>
	{
		public static readonly IParser<T> Default = Parser.Get<T>();
	}
}
