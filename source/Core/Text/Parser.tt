<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

// <copyright file="Range.cs" author="Dmitry Kravchenin" email="d.kravchenin@zaaml.com">
//   Copyright (c) Zaaml. All rights reserved.
// </copyright>

// *************************************************************
//
// AutoGenerated
//
// *************************************************************

// ReSharper disable All

using System.Collections.Generic;

<#
var typeNames = new List<string>{ "byte", "sbyte", "char", "short", "ushort", "int", "uint", "long", "ulong", "float", "double" };
#>

namespace Zaaml.Core.Text
{
	internal partial class Parser
	{
		private static readonly Dictionary<Type, object> Dictionary = new Dictionary<Type, object> 
		{
<#
		foreach (var t in typeNames)
		{
#>
			{ typeof(<#= t #>), new <#= t #>Parser() },
<#
}
#>
		};

		public static IParser<T> Get<T>()
		{
			return (IParser<T>)Dictionary.GetValueOrDefault(typeof(T));
		}

<#
		foreach (var t in typeNames)
		{
#>
		private class <#= t #>Parser : IParser<<#= t #>>
		{
			public <#= t #> Parse(string value)
			{
				return <#= t #>.Parse(value);
			}

			public bool TryParse(string value, out <#= t #> result)
			{
				return <#= t #>.TryParse(value, out result);
			}
		}

<#
}
#>		
	}

	public partial class StaticParser<T>
	{
		public static readonly IParser<T> Default = Parser.Get<T>();
	}
}
