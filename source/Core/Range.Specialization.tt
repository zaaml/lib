<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

// <copyright file="Range.cs" author="Dmitry Kravchenin" email="d.kravchenin@zaaml.com">
//   Copyright (c) Zaaml. All rights reserved.
// </copyright>

// *************************************************************
//
// AutoGenerated
//
// *************************************************************

// ReSharper disable All

<#
var typeNames = new List<string>{ "byte", "sbyte", "char", "short", "ushort", "int", "uint", "long", "ulong", "float", "double" };
#>

namespace Zaaml.Core
{
	public static partial class Range
	{
<#
foreach (var t in typeNames)
{
#>
		public static Range<<#= t #>> Create(<#= t #> minimum, <#= t #> maximum)
		{
			return new Range<<#= t #>>(minimum, maximum);
		}

		public static Range<<#= t #>> WithOffset(this Range<<#= t #>> range, <#= t #> offset)
		{
			return new Range<<#= t #>>((<#= t #>) (range.Minimum + offset), (<#= t #>) (range.Maximum + offset));
		}

		public static Range<<#= t #>> WithShrink(this Range<<#= t #>> range, <#= t #> value)
		{
			return new Range<<#= t #>>((<#= t #>) (range.Minimum + value), (<#= t #>) (range.Maximum - value));
		}

		public static Range<<#= t #>> WithExpand(this Range<<#= t #>> range, <#= t #> value)
		{
			return new Range<<#= t #>>((<#= t #>) (range.Minimum - value), (<#= t #>) (range.Maximum + value));
		}
<#
}
#>
	}
}