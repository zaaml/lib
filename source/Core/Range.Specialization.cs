
// <copyright file="Range.cs" author="Dmitry Kravchenin" email="d.kravchenin@zaaml.com">
//   Copyright (c) Zaaml. All rights reserved.
// </copyright>

// *************************************************************
//
// AutoGenerated
//
// *************************************************************

// ReSharper disable All


namespace Zaaml.Core
{
	public static partial class Range
	{
		public static Range<byte> Create(byte minimum, byte maximum)
		{
			return new Range<byte>(minimum, maximum);
		}

		public static Range<byte> WithOffset(this Range<byte> range, byte offset)
		{
			return new Range<byte>((byte) (range.Minimum + offset), (byte) (range.Maximum + offset));
		}

		public static Range<byte> WithShrink(this Range<byte> range, byte value)
		{
			return new Range<byte>((byte) (range.Minimum + value), (byte) (range.Maximum - value));
		}

		public static Range<byte> WithExpand(this Range<byte> range, byte value)
		{
			return new Range<byte>((byte) (range.Minimum - value), (byte) (range.Maximum + value));
		}
		public static Range<sbyte> Create(sbyte minimum, sbyte maximum)
		{
			return new Range<sbyte>(minimum, maximum);
		}

		public static Range<sbyte> WithOffset(this Range<sbyte> range, sbyte offset)
		{
			return new Range<sbyte>((sbyte) (range.Minimum + offset), (sbyte) (range.Maximum + offset));
		}

		public static Range<sbyte> WithShrink(this Range<sbyte> range, sbyte value)
		{
			return new Range<sbyte>((sbyte) (range.Minimum + value), (sbyte) (range.Maximum - value));
		}

		public static Range<sbyte> WithExpand(this Range<sbyte> range, sbyte value)
		{
			return new Range<sbyte>((sbyte) (range.Minimum - value), (sbyte) (range.Maximum + value));
		}
		public static Range<char> Create(char minimum, char maximum)
		{
			return new Range<char>(minimum, maximum);
		}

		public static Range<char> WithOffset(this Range<char> range, char offset)
		{
			return new Range<char>((char) (range.Minimum + offset), (char) (range.Maximum + offset));
		}

		public static Range<char> WithShrink(this Range<char> range, char value)
		{
			return new Range<char>((char) (range.Minimum + value), (char) (range.Maximum - value));
		}

		public static Range<char> WithExpand(this Range<char> range, char value)
		{
			return new Range<char>((char) (range.Minimum - value), (char) (range.Maximum + value));
		}
		public static Range<short> Create(short minimum, short maximum)
		{
			return new Range<short>(minimum, maximum);
		}

		public static Range<short> WithOffset(this Range<short> range, short offset)
		{
			return new Range<short>((short) (range.Minimum + offset), (short) (range.Maximum + offset));
		}

		public static Range<short> WithShrink(this Range<short> range, short value)
		{
			return new Range<short>((short) (range.Minimum + value), (short) (range.Maximum - value));
		}

		public static Range<short> WithExpand(this Range<short> range, short value)
		{
			return new Range<short>((short) (range.Minimum - value), (short) (range.Maximum + value));
		}
		public static Range<ushort> Create(ushort minimum, ushort maximum)
		{
			return new Range<ushort>(minimum, maximum);
		}

		public static Range<ushort> WithOffset(this Range<ushort> range, ushort offset)
		{
			return new Range<ushort>((ushort) (range.Minimum + offset), (ushort) (range.Maximum + offset));
		}

		public static Range<ushort> WithShrink(this Range<ushort> range, ushort value)
		{
			return new Range<ushort>((ushort) (range.Minimum + value), (ushort) (range.Maximum - value));
		}

		public static Range<ushort> WithExpand(this Range<ushort> range, ushort value)
		{
			return new Range<ushort>((ushort) (range.Minimum - value), (ushort) (range.Maximum + value));
		}
		public static Range<int> Create(int minimum, int maximum)
		{
			return new Range<int>(minimum, maximum);
		}

		public static Range<int> WithOffset(this Range<int> range, int offset)
		{
			return new Range<int>((int) (range.Minimum + offset), (int) (range.Maximum + offset));
		}

		public static Range<int> WithShrink(this Range<int> range, int value)
		{
			return new Range<int>((int) (range.Minimum + value), (int) (range.Maximum - value));
		}

		public static Range<int> WithExpand(this Range<int> range, int value)
		{
			return new Range<int>((int) (range.Minimum - value), (int) (range.Maximum + value));
		}
		public static Range<uint> Create(uint minimum, uint maximum)
		{
			return new Range<uint>(minimum, maximum);
		}

		public static Range<uint> WithOffset(this Range<uint> range, uint offset)
		{
			return new Range<uint>((uint) (range.Minimum + offset), (uint) (range.Maximum + offset));
		}

		public static Range<uint> WithShrink(this Range<uint> range, uint value)
		{
			return new Range<uint>((uint) (range.Minimum + value), (uint) (range.Maximum - value));
		}

		public static Range<uint> WithExpand(this Range<uint> range, uint value)
		{
			return new Range<uint>((uint) (range.Minimum - value), (uint) (range.Maximum + value));
		}
		public static Range<long> Create(long minimum, long maximum)
		{
			return new Range<long>(minimum, maximum);
		}

		public static Range<long> WithOffset(this Range<long> range, long offset)
		{
			return new Range<long>((long) (range.Minimum + offset), (long) (range.Maximum + offset));
		}

		public static Range<long> WithShrink(this Range<long> range, long value)
		{
			return new Range<long>((long) (range.Minimum + value), (long) (range.Maximum - value));
		}

		public static Range<long> WithExpand(this Range<long> range, long value)
		{
			return new Range<long>((long) (range.Minimum - value), (long) (range.Maximum + value));
		}
		public static Range<ulong> Create(ulong minimum, ulong maximum)
		{
			return new Range<ulong>(minimum, maximum);
		}

		public static Range<ulong> WithOffset(this Range<ulong> range, ulong offset)
		{
			return new Range<ulong>((ulong) (range.Minimum + offset), (ulong) (range.Maximum + offset));
		}

		public static Range<ulong> WithShrink(this Range<ulong> range, ulong value)
		{
			return new Range<ulong>((ulong) (range.Minimum + value), (ulong) (range.Maximum - value));
		}

		public static Range<ulong> WithExpand(this Range<ulong> range, ulong value)
		{
			return new Range<ulong>((ulong) (range.Minimum - value), (ulong) (range.Maximum + value));
		}
		public static Range<float> Create(float minimum, float maximum)
		{
			return new Range<float>(minimum, maximum);
		}

		public static Range<float> WithOffset(this Range<float> range, float offset)
		{
			return new Range<float>((float) (range.Minimum + offset), (float) (range.Maximum + offset));
		}

		public static Range<float> WithShrink(this Range<float> range, float value)
		{
			return new Range<float>((float) (range.Minimum + value), (float) (range.Maximum - value));
		}

		public static Range<float> WithExpand(this Range<float> range, float value)
		{
			return new Range<float>((float) (range.Minimum - value), (float) (range.Maximum + value));
		}
		public static Range<double> Create(double minimum, double maximum)
		{
			return new Range<double>(minimum, maximum);
		}

		public static Range<double> WithOffset(this Range<double> range, double offset)
		{
			return new Range<double>((double) (range.Minimum + offset), (double) (range.Maximum + offset));
		}

		public static Range<double> WithShrink(this Range<double> range, double value)
		{
			return new Range<double>((double) (range.Minimum + value), (double) (range.Maximum - value));
		}

		public static Range<double> WithExpand(this Range<double> range, double value)
		{
			return new Range<double>((double) (range.Minimum - value), (double) (range.Maximum + value));
		}
	}
}