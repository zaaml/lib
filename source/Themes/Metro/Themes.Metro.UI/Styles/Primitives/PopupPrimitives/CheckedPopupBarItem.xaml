<zm:ThemeResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                            xmlns:zm="http://schemas.zaaml.com/xaml" 
                            xmlns:zmb="http://schemas.zaaml.com/build"
                            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                            mc:Ignorable="zmb">

  <zm:ThemeResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="PopupBarCommon.xaml" />
    <ResourceDictionary>

      <!-- Visual States -->
      <zm:VisualStateGroupCollection x:Key="VisualStates">

        <!-- CommonStates States -->
        <zm:VisualStateGroup Name="CommonStates">
          <zm:VisualState Name="Normal" />
          <zm:VisualState Name="ReadOnly" />
          <zm:VisualState Name="MouseOver" />
          <zm:VisualState Name="Pressed" />
          <zm:VisualState Name="Disabled" />
        </zm:VisualStateGroup>
      </zm:VisualStateGroupCollection>

      <!-- CheckedPopupBarItem Template -->
      <ControlTemplate x:Key="CheckedPopupBarItemTemplate" TargetType="zm:CheckedPopupBarItem">
        <zm:ControlTemplateRoot x:Name="TemplateRoot" 
                                Background="Transparent" 
                                VisualStateGroups="{StaticResource VisualStates}">
          <Grid x:Name="Root">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="20" x:Name="TriggerColumn" />
            </Grid.ColumnDefinitions>

            <Border x:Name="Border" 
                    Style="{StaticResource PopupBarItemBorderStyle}" 
                    zm:Interaction.Enabled="True">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="16" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <zm:CheckBoxGlyphControl BorderThickness="1"
                                         IsChecked="{zm:TemplateBinding Path=IsChecked}"
                                         IsReadOnly="{zm:TemplateBinding Path=IsReadOnly}"
                                         Width="14" 
                                         Height="14"
                                         Foreground="{zm:ThemeResource Key=Metro.StandardControls.CheckBox.Foreground.Normal}"
                                         Background="{zm:ThemeResource Key=Metro.StandardControls.CheckBox.Background.Normal}"
                                         BorderBrush="{zm:ThemeResource Key=Metro.StandardControls.CheckBox.BorderBrush.Normal}" />

                <ContentPresenter Grid.Column="1" 
                                  Margin="4,0,0,0" 
                                  HorizontalAlignment="{zm:TemplateBinding Path=HorizontalContentAlignment}"
                                  VerticalAlignment="{zm:TemplateBinding Path=VerticalContentAlignment}" 
                                  IsHitTestVisible="False" x:Name="contentPresenter"
                                  Content="{zm:TemplateBinding Path=Header}"
                                  ContentTemplate="{zm:TemplateBinding Path=HeaderTemplate}" />
              </Grid>
            </Border>

            <ToggleButton x:Name="SubBarTrigger" 
                          Grid.Column="1" 
                          ClickMode="Press"
                          Background="Transparent" 
                          Visibility="{zm:TemplateBinding Path=AllowSubBar, Converter={zm:VisibilityConverter}}"
                          IsChecked="{zm:TemplateBinding Path=IsSubBarOpen, Mode=TwoWay}"
                          Foreground="{zm:TemplateBinding Path=Foreground}" 
                          Template="{StaticResource ToggleSubBarButton}" />

            <zm:PopupBar x:Name="PopupBar"
                         Grid.Column="0" 
                         BorderStyle="ArrowBorder"
                         PlacementOptions="{zm:TemplateBinding Path=PlacementOptions}"
                         IsOpen="{zm:TemplateBinding Path=IsSubBarOpen, Mode=TwoWay}">
              <zm:PopupBar.Placement>
                <zm:SnapPlacement Target="{zm:TemplateBinding}"
                                  SnapSide="Right" 
                                  SourceAdjustment="-8,22" 
                                  Definition="{zm:Static Member=zm:SnapDefinition.TargetCenterSourceCorner}"/>
              </zm:PopupBar.Placement>
              <ContentPresenter Content="{zm:TemplateBinding Path=Content}"/>
            </zm:PopupBar>

            <zm:Extension.Setters>
              <zm:Setter ExpandoProperty="ControlForeground" Value="{zm:TemplateBinding Path=Foreground}" />
            </zm:Extension.Setters>

          </Grid>

          <!-- Control Triggers -->
          <zm:Extension.Triggers>
            <zm:DataTrigger Binding="{zm:ExpandoBinding Path=IsHighlighted, ElementName=Border}" Value="True">
              <zm:Setter Property="Background" TargetName="Border" Value="{zm:ThemeResource Key=Metro.MenuItem.MouseOverBackground}" />
              <zm:Setter ExpandoProperty="ControlForeground" TargetName="Root" Value="{zm:ThemeResource Key=Metro.MenuItem.MouseOverForeground}" />

              <!--<zm:Setter ExpandoProperty="GlyphFill" TargetName="Glyph" Value="White" />
              <zm:Setter ExpandoProperty="GlyphBorderBrush" TargetName="Glyph" Value="White" />-->
            </zm:DataTrigger>

            <zm:DataTrigger Binding="{Binding Path=(zm:Interaction.IsMouseOver), ElementName=Border}" Value="True">

              <zm:Setter ExpandoProperty="IsHighlighted" TargetName="Border" Value="True" />

            </zm:DataTrigger>

            <zm:MultiTrigger LogicalOperator="Or">
              <zm:MultiTrigger.Conditions>
                <zm:DataCondition Binding="{zm:TemplateBinding Path=IsMouseOver}" Value="False" />
                <zm:DataCondition Binding="{zm:TemplateBinding Path=Content}" Value="{x:Null}" />
              </zm:MultiTrigger.Conditions>

              <zm:Setter Property="Visibility" TargetName="SubBarTrigger" Value="Collapsed" />
            </zm:MultiTrigger>

            <zm:DataTrigger Binding="{zm:TemplateBinding Path=IsSubBarOpen}" Value="True">
              <zm:Setter Property="Visibility" TargetName="SubBarTrigger" Value="Visible" Priority="1" />
              <zm:Setter ExpandoProperty="IsHighlighted" TargetName="Border" Value="True" Priority="1" />
            </zm:DataTrigger>

            <zm:DataTrigger Binding="{zm:TemplateBinding Path=Content}" Value="{x:Null}">
              <zm:Setter Property="Width" TargetName="TriggerColumn" Value="0" />
            </zm:DataTrigger>
          </zm:Extension.Triggers>
        </zm:ControlTemplateRoot>
      </ControlTemplate>

      <!-- Base Styles -->
      <zm:Style x:Key="CheckedPopupBarItemBaseStyle" TargetType="zm:CheckedPopupBarItem">
        <zm:Setter Property="Template" Value="{StaticResource CheckedPopupBarItemTemplate}" />
        <zm:Setter Property="HorizontalContentAlignment" Value="Left" />
        <zm:Setter Property="VerticalContentAlignment" Value="Center" />

        <zm:SetterGroup ValuePathSource="ThemeResource">
          <zm:Setter Property="Foreground" ValuePath="Metro.MenuItem.Foreground.Normal" />
        </zm:SetterGroup>
      </zm:Style>

      <!-- Base Skinned Styles -->
      <zm:Style x:Key="CheckedPopupBarItemBaseSkinnedStyle" TargetType="zm:CheckedPopupBarItem" BasedOn="{StaticResource CheckedPopupBarItemBaseStyle}" />

    </ResourceDictionary>
  </zm:ThemeResourceDictionary.MergedDictionaries>


  <!-- Theme Styles -->
  <zm:ThemeStyle x:Key="CheckedPopupBarItemThemeStyle" TargetType="zm:CheckedPopupBarItem" BasedOn="{StaticResource CheckedPopupBarItemBaseSkinnedStyle}" zmb:Deferred="True" />

</zm:ThemeResourceDictionary>